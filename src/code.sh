#!/bin/bash
# CRAM_TO_FASTQ 1.0.0
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

    echo "Value of input_cram_file: '${input_cram_file[@]}'"

    tar -xzf /home/dnanexus/samtools-1.13.tar.gz

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    for i in ${!input_cram_file[@]}
    do
        dx download "${input_cram_file[$i]}"
        echo "Downloaded"
        cmd="dx describe '${input_cram_file[$i]}' --name"
        echo $cmd
        filename=$(eval $cmd)
        echo "Filename is $filename"
        cmd="cram_to_fastq_v_1.0.0.sh -i /home/dnanexus/${filename}"
	    echo $cmd
	    eval $cmd
        rm ${filename}

    done

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    for i in "${!output_forward_read[@]}"; do
        dx-jobutil-add-output output_forward_read "${output_forward_read[$i]}" --class=array:file
    done
    for i in "${!output_reverse_read[@]}"; do
        dx-jobutil-add-output output_reverse_read "${output_reverse_read[$i]}" --class=array:file
    done
}
